https://medium.com/@andrewyang96/coding-a-game-of-hangman-in-python-from-scratch-a538542e5c0c

‏המשימה: 	לכתוב משחק איש תלוי בפייתון.

הקלט:	1. מסמך טקסט
	2. מספר- אינדקס
	3. אותיות לניחוש

הפלט:	1. סטטוס האיש התלוי - לפי קצב הטעויות של השחקן
	2. המילה שאנחנו צריכים לנחש בקווים ריקים
	3. במקרה שהתו לא תקין או נוחש בעבר "X"
	4. במקרה שהתו לא נמצא במילה שאנחנו מנחשים ":("
	5. רשימה של אותיות שנוחשו בעבר מסודרות לפי האייביסי
	6. המילה שאותה אנחנו מנסים לנחש בהתאם להנתקדמות-שילוב של תווים ריקים ואותיות שנוחשו נכון.
	7. הדפסה של "WIN" במידה והשחקן ניחש את המילה לפני שנגמרו לו הניחושים
	8. הדפסה של "LOSE" במידה והשחקן לא הצליח לנחש את המילה ומיצא את מספר הניחושים שלו.

הקוד עצמו:	1. הדפס מסך כניסה:
		1.1 הדפס את הלוגו
		1.2 הדפס את מספר הניחושים- 7 MAX_TRIES
	2.בקש מהשחקן נתונים בכדי לבחור את המילה הסודית לניחוש: choose_word(file_path, index)
		2.1 הכנס את שם הקובץ
		         ופתח אותו.
		2.2 הכנס מספר-אינדקס בכדי לבחור את המילה הסודית מתוך המסמך.
		2.3 החזר את המילה הסודית. secret_word
	3. הצג את סטטוס האיש התלוי במצב ההתחלתי. HANGMAN_PHOTOS
	4. מתחת לאיש התלוי  הצג את המילה הסודית בתווים ריקים
	5. כל עוד המילה לא נוחשה או שמספר הטעוית(של תו תקין) לא הגיע ל7:
		5.1 בקש מהשחקן להכניס תו:
		5.2 אם התו אינו תקין: check_valid_input(letter_guessed, old_letters_guessed)try_update_letter_guessed(letter_guessed, old_letters_guessed)
			5.2.1 אם אורך התו גדול מ-1
			5.2.2 ו/או התו אינו באנגלית.
			5.2.3 או שהתו נוחש בעבר
				5.2.3.1 הדפס "X"
				5.2.3.2 הדפס רשימה של האותיות התקינות שנוחשו בעבר
				5.2.3.3 continue
		5.3 עבור כל ניחוש מוצלח:is_guess_correct(guessed_letter, secret_word):
			5.3.1 הצג לשחקן את המילה הסודית בהתאם להתקדמות-שילוב של תווים ריקים ואותיות. show_hidden_word(secret_word, old_letters_guessed)
		5.4 עבור כל ניחוש כושל: is_guess_correct(guessed_letter, secret_word):
			5.4.1 הדפס לשחקן  ":("
			5.4.2 הדפס את הסטטוס של האיש הלוי במצב המתקדם יותר +1 num_of_tries, HANGMAN_PHOTOS
			5.4.3 הצג לשחקן את המילה הסודית בהתאם להתקדמות-שילוב של תווים ריקים ואותיות. show_hidden_word(secret_word, old_letters_guessed)
	6. סיום המשחק- בדיקה האם השחקן ניצח או הפסיד: check_win(secret_word, old_letters_guessed)
		6.1 אם השחקן ניחש  את המילה לפני שנגמרו לו הניחושים:
			6.1.1 הדפס "WIN"
		6.2  אם השחקן לא ניחש  את המילה לפני שנגמרו לו הניחושים:
			6.2.1 הדפס "LOSE"
---------------------------------------------------------------------

דגשים להגשת המטלה:

1.    פונקציונליות - הרצה תקינה של הקוד והתאמתו לדרישות המטלה:
	1.1 האם הקוד מבצע את כל המבוקש בהתאם להנחיות המטלה? הריצו את המשחק ובדקו תוצאות שונות (פעם ניצחון ופעם הפסד).
	1.2 האם ישנם מקרי קצה שלא התייחסתם אליהם? לדוגמה, לנסות לקלוט שם קובץ לא קיים, או אינדקס שלא קיים של מילה מהקובץ.
2.    עיצוב וקידוד- עיצוב הקוד בצורה ברורה ולוגית , חלוקה לפונקציות:
	2.1  האם מימשתם את כל פונקציות החובה שנדרשו במשימה? 
	2.2  בנוסף, האם אתם מבחינים בשכפול מיותר של קוד? אם כן -
		2.2.1 ייתכן וכדאי לאגד את רצף שורות הקוד הזהות תחת פונקציות משלכם.  (על הקוד שלכם להיות מודולרי ככל האפשר. שימו לב שהחלוקה שלכם לפונקציות היא בהכרח הגיונית וברורה.
	2.3  עברו בקפידה על הקוד ונסו לאתר שגיאות תכנותיות שונות:
		2.3.1 קטעי קוד מיותרים שאינם רצים לעולם? - בטלו אותם.
		2.3.2 משתנה שלא נעשה בו שימוש כלל?- בטלו אותם.
		2.3.3 קינון רב של בלוקים (בלוק בתוך בלוק בתוך בלוק...), באופן שלא בהכרח נדרש?
		2.3.4 ביצוע המרה (casting) שלא כצורך
3.   קריאות וסגנון- הקפדה על קונבנציות (1) והוספת תיעוד(2):
	3.1 האם הקוד שלכם עומד בקונבנציות הקורס?  
		3.1.1  ריווח אופרטורים משני הצדדים (לדוגמה: 7 > a או 2 == a)
		3.1.2   ריווח בפונקציות או במתודות: כאשר מעבירים לפונקציה או למתודה יותר מפרמטר אחד בסוגריים, יש לכתוב רווח אחד אחרי כל פסיק שמפריד בין פרמטרים.
		3.1.3  ואם מעבירים רק פרמטר אחד, לא יהיו רווחים כלל,
		3.1.4 הקפדה על כתיבת שמות משתנים באותיות אנגליות קטנות, עם מילים מופרדות בקווים תחתונים (לדוגמה: book, book_sales)
		3.1.5 שמות קבועים ייכתבו באותיות גדולות בלבד, עם מילים מופרדות בקווים תחתונים (לדוגמה: PI, BOOK_AUTHOR)
		3.1.6הזחה תתבצע על ידי ארבעה רווחים.
		3.1.7 שימוש בפונקציה main במבנה:
	3.2 האם הוא מתועד כנדרש
		3.2.1 תיעוד לפונקציה נמצא מיד לאחר הגדרת הפונקציה. התיעוד נכתב כשורת קוד אחת או יותר, הנקראת docstring והוא ערוך בתוך מרכאות משולשות.
		**דוגמה - http://e-learn.cyber.org.il/python/interactive_links/link_10_1_1.html

			3.2.1.1 הפרמטרים שהפונקציה מקבלת והטיפוס שלהם (במידה והיא מקבלת פרמטרים)
			3.2.1.2  הערכים שהפונקציה מחזירה והטיפוס שלהם (ערך None אם אין שורת return שמחזירה ערך במפורש)
			3.2.1.3   מה הפונקציה מבצעת 
   		3.2.2 במידת הצורך, זכרו להוסיף תיעוד פנימי בתוך הקוד באמצעות הוספת הערות שורה.  כתבו סולמית (#) ולאחריה טקסט חופשי

4.    טיפים לכתיבה נכונה בפייתון.
	4.1 האם הקוד שלכם עושה שימוש בפונקציות ומתודות מובנות בשפה בעת הצורך?
		4.1.1  אם יש פעולה לא טריוויאלית שרציתם לממש - כדאי להריץ עליה חיפוש ברשת - סיכוי גדול שהיא כבר קיימת
		4.1.2 אפשר לממש פונקציה שבודקת אם תו מסוים (בהנחה שהוא תו בודד) הוא אות: 
			4.1.2.1 או יותר טוב, להשתמש במתודה המובנית "isalpha" 
	4.2 האם עשיתם שימוש נכון בבחירת סוג לולאה? לדוגמה, כדי להדפיס איברים של רשימה - במקום לכתוב
		4.2.1 חשוב להשתמש בלולאות בצורה נכונה התואמת את המבנה שלהן בשפה.  חזרו על החומר ביחידה 7 (לולאות)
	4.3 האם הוספתם שורות שאין בהן צורך ממשי? הקפידו על כתיבת קוד פשוט (רק אם זה לא פוגע בקריאות הקוד!)
		**דוגמה - http://e-learn.cyber.org.il/python/interactive_links/link_10_1_1.html

     
  