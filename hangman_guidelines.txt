
this is going to be a game called **Hangmam**.
I'm writing it in *python*.
*wish me luck*

חלקי המשחק שכתבתם לאורך הקורס ולכתוב תוצר סופי שהוא המשחק המלא איש תלוי!

כתבו תוכנית שקולטת מהשחקן:

1. מחרוזת המייצגת נתיב לקובץ טקסט.
2.  קובץ הטקסט יכיל רשימת מילים מופרדות ברווחים.
3. מספר שלם המייצג מיקום של מילה מסוימת בקובץ.

המילה במיקום שנקלט תהיה המילה הסודית אותה יצטרך השחקן לנחש.

מרגע זה ימשך המשחק לפי חוקי "איש תלוי" - בכל שלב ינחש השחקן אות, יקבל משוב בהתאם להימצאותה של האות במילה הסודית ובהתאם לניחושיו עד כה.

קראו בעיון את כל ההוראות ופרטי המשחק המופיעים בהמשך ובהצלחה!
----------------------------------------------------------
הנחיות

    חובה להשתמש בפונקציות שמימשתם במשימה המתגלגלת שבסוף היחידות הקודמות:
        check_win(secret_word, old_letters_guessed)
        פונקציה שמימשתם בסוף היחידה בנושא לולאות.
        להזכירכם, זאת פונקציה בוליאנית שמחזירה אמת אם כל האותיות שמרכיבות את המילה הסודית נכללות ברשימת האותיות שהמשתמש ניחש. אחרת, הפונקציה מחזירה שקר.
        show_hidden_word(secret_word, old_letters_guessed)
        פונקציה שמימשתם בסוף היחידה בנושא לולאות.
        להזכירכם, זאת פונקציה שמחזירה מחרוזת אשר מורכבת מאותיות ומקווים תחתונים. המחרוזת מציגה את האותיות מתוך הרשימה old_letters_guessed שנמצאות במחרוזת secret_word במיקומן המתאים, ואת שאר האותיות במחרוזת (אותן השחקן טרם ניחש) כקווים תחתונים.
        check_valid_input(letter_guessed, old_letters_guessed)
        פונקציה שמימשתם בסוף היחידה בנושא רשימות.
        להזכירכם, זאת פונקציה בוליאנית שמקבלת תו ורשימת אותיות שהמשתמש ניחש בעבר. הפונקציה בודקת שני דברים: את תקינות הקלט והאם חוקי לנחש אות זו (כלומר, השחקן לא ניחש אות זו בעבר) ומחזירה אמת או שקר בהתאם.
        try_update_letter_guessed(letter_guessed, old_letters_guessed)
        פונקציה שמימשתם בסוף היחידה בנושא רשימות.
        להזכירכם, הפונקציה משתמשת בפונקציה check_valid_input כדי לדעת אם התו תקין ולא ניחשו אותו בעבר או התו אינו תקין ו/או נמצא כבר ברשימת הניחושים.
        אם התו איננו תקין או שכבר ניחשו את התו בעבר, הפונקציה מדפיסה את התו X (כאות גדולה), מתחתיו את רשימת האותיות שכבר נוחשו ומחזירה שקר. אם התו תקין ולא ניחשו אותו בעבר - הפונקציה מוסיפה את התו לרשימת הניחושים ומחזירה אמת.
        choose_word(file_path, index)
        פונקציה שמימשתם בסוף היחידה בנושא קבצים.
        להזכירכם, הפונקציה מקבלת כפרמטרים: מחרוזת המייצגת נתיב לקובץ טקסט המכיל מילים מופרדות ברווחים, ומספר שלם המייצג מיקום של מילה מסוימת בקובץ.
        הפונקציה מחזירה טאפל המורכב משני איברים בסדר הבא: (1) מספר המילים השונות בקובץ (2) מילה במיקום שהתקבל כארגומנט לפונקציה (index).
        מומלץ לשנות את ערכי החזרת הפונקציה, כך שתחזיר רק ערך אחד: את המילה במיקום index, שתשמש בתור המילה הסודית לניחוש.
    מומלץ לאגד את הדפסת דף הפתיחה שעיצבתם ביחידה הראשונה תחת פונקציה מסודרת.
    אל תהססו לכתוב פונקציות נוספות לשיקולכם.
    למיטיבי לכת (לא חובה): תוכלו להוסיף פונקציונליות נוספת למשחק, למשל: פונקציה שמנקה את המסך, פונקציה שמדפיסה את האיש התלוי בצבעים שונים, ועוד. תהיו יצירתיים! (ואל תשכחו לתעד את התוספות שלכם בקוד לפני הגשתו למדריך).
    היעזרו במשתנים הבאים:
        מחרוזת שנקראת secret_word. זאת המילה אותה צריך המשתמש לנחש, אשר עוברת כארגומנט לפונקציה hangman.
        רשימה שנקראת old_letters_guessed. הרשימה מחזיקה את האותיות שהשחקן ניחש עד כה.
        מספר שנקרא MAX_TRIES. המשתנה מחזיק את מקסימום הניסיונות הכושלים המותרים במשחק, שהוא 7.
        מספר שנקרא num_of_tries. המספר מייצג את מספר הניסיונות הכושלים של המשתמש עד כה.
        מילון שנקרא HANGMAN_PHOTOS. המשתנה מחזיק את התמונות של האיש התלוי בכל אחד מהמצבים.
    הקפידו על פלט מדויק (ראו הוראות ודוגמאות פלט בהמשך).


-----------------------------------------------------------
כחלק מהגשת המשימה המתגלגלת, נדרשת מכם עמידה בקריטריונים הבאים:

    פונקציונליות - הרצה תקינה של הקוד והתאמתו לדרישות המטלה
    עיצוב וקידוד- (1) עיצוב הקוד בצורה ברורה ולוגית (2) חלוקה לפונקציות
    קריאות וסגנון- הקפדה על קונבנציות והוספת תיעוד

בנוסף בסוף המסמך תמצאו טיפים לכתיבה נכונה בפייתון.

לפני שאתם מגישים את המטלה המסכמת של התרגיל המתגלגל, עברו על הסעיפים הבאים, וודאו שהתכנית שכתבתם אכן עומדת בקריטריונים הנדרשים:

    פונקציונאליות
        האם הקוד מבצע את כל המבוקש בהתאם להנחיות המטלה? הריצו את המשחק שכתבתם מספר פעמים באמצעות קלטים שיובילו לתוצאות שונות (פעם ניצחון ופעם הפסד).
        במידת הצורך, תוכלו להיעזר בדוגמאות לפלטים של הצלחה וכישלון שמופיעים בהנחיות המשימה.
        חישבו: האם ישנם מקרי קצה שלא התייחסתם אליהם? נסו לאתגר את הקוד שלכם בכל מיני תרחישים שונים! לדוגמה, אתם יכולים לנסות לקלוט שם קובץ לא קיים, או אינדקס שלא קיים של מילה מהקובץ.
    עיצוב וקידוד
        האם מימשתם את כל פונקציות החובה שנדרשו במשימה? בנוסף, האם אתם מבחינים בשכפול מיותר של קוד? אם כן - ייתכן וכדאי לאגד את רצף שורות הקוד הזהות תחת פונקציות משלכם ולעשות בהן שימוש חוזר (על הקוד שלכם להיות מודולרי ככל האפשר. שימו לב שהחלוקה שלכם לפונקציות היא בהכרח הגיונית וברורה.
        עברו בקפידה על הקוד ונסו לאתר שגיאות תכנותיות שונות. לדוגמה, האם הבחנתם בקטעי קוד מיותרים שאינם רצים לעולם? יצרתם משתנה שלא נעשה בו שימוש כלל? יצרתם קינון רב של בלוקים (בלוק בתוך בלוק בתוך בלוק...), באופן שלא בהכרח נדרש? דוגמה נוספת היא ביצוע המרה (casting) שלא כצורך:
        print(int(len(my_list)))
    קריאות וסגנון - קונבנציות ותיעוד
    האם הקוד שלכם עומד בקונבנציות הקורס? האם הוא מתועד כנדרש? להלן הרשימה המלאה של קונבנציות הקורס והסבר על אופן תיעוד הפונקציות המצופה מכם:

    קונבנציות
        ריווח אופרטורים משני הצדדים (לדוגמה: 7 > a או 2 == a)
        ריווח בפונקציות או במתודות: כאשר מעבירים לפונקציה או למתודה יותר מפרמטר אחד בסוגריים, יש לכתוב רווח אחד אחרי כל פסיק שמפריד בין פרמטרים, ואם מעבירים רק פרמטר אחד, לא יהיו רווחים כלל, לדוגמה:
        func(a, b, c)
        func(a)
        d.method(a, b, c)
        הקפדה על כתיבת שמות משתנים באותיות אנגליות קטנות, עם מילים מופרדות בקווים תחתונים (לדוגמה: book, book_sales).
        שמות קבועים ייכתבו באותיות גדולות בלבד, עם מילים מופרדות בקווים תחתונים (לדוגמה: PI, BOOK_AUTHOR).
        בחירת שמות ברורים למשתנים, אשר מבטאים את המהות או המשמעות של הערכים שהמשתנים מחזיקים. בנוסף, בחירת שמות משמעותיים לפונקציות, אשר משקפים את מטרתן.
        הזחה תתבצע על ידי ארבעה רווחים.
        שימוש בפונקציה main במבנה:
        def main():
            <Your code here: start hangman game>

        if __name__ == "__main__":
            main()
    תיעוד
    תיעוד לפונקציה נמצא מיד לאחר הגדרת הפונקציה. התיעוד נכתב כשורת קוד אחת או יותר, הנקראת docstring והוא ערוך בתוך מרכאות משולשות.
        התיעוד לפונקציה צריך לכלול את המידע הבא:
        הפרמטרים שהפונקציה מקבלת והטיפוס שלהם (במידה והיא מקבלת פרמטרים)
        הערכים שהפונקציה מחזירה והטיפוס שלהם (ערך None אם אין שורת return שמחזירה ערך במפורש)
        מה הפונקציה מבצעת
        דוגמה (פונקציה שמחשבת חזקה):
        def power(base, exponent):
            """Calculates a number raised to a power.
            :param base: base value
            :param exponent: exponent value
            :type base: int
            :type exponent: int
            :return: The result of raising base to the power exponent
            :rtype: int
            """
            return(base ** exponent)
        במידת הצורך, זכרו להוסיף תיעוד פנימי בתוך הקוד באמצעות הוספת הערות שורה. בכדי לשלב הערות שורה, כתבו סולמית (#) ולאחריה טקסט חופשי.

טיפים לכתיבה נכונה מתקדמת בפייתון (עצות טובות, לא חובה בהגשת התרגיל)

    האם הקוד שלכם עושה שימוש בפונקציות ומתודות מובנות בשפה בעת הצורך? (שימו לב: אין צורך להמציא את הגלגל! אם יש פעולה לא טריוויאלית שרציתם לממש - כדאי להריץ עליה חיפוש ברשת - סיכוי גדול שהיא כבר קיימת).
    לדוגמה, אפשר לממש פונקציה שבודקת אם תו מסוים (בהנחה שהוא תו בודד) הוא אות:
    ABC_LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

    def is_letter(letter):
        return letter in ABC_LETTERS
    או יותר טוב, להשתמש במתודה המובנית "isalpha" שעושה זאת בעבורנו:
    letter.isalpha()
    האם עשיתם שימוש נכון בבחירת סוג לולאה? לדוגמה, כדי להדפיס איברים של רשימה - במקום לכתוב:
    my_list = ['self', '.', 'py']
    index = 0
    while index < len(my_list):
        print(my_list[index])
        index += 1
    נכתוב:
    my_list = ['self', '.', 'py']
    for element in my_list:
        print(element)
    חשוב להשתמש בלולאות בצורה נכונה התואמת את המבנה שלהן בשפה. במידת הצורך, חזרו על החומר ביחידה 7 (לולאות).
    בדקו: האם הוספתם שורות שאין בהן צורך ממשי? הקפידו על כתיבת קוד פשוט (רק אם זה לא פוגע בקריאות הקוד!)
    לדוגמה, במקום:
    def func():
        if string.isalpha() == True:
            return True
        else:
            return False
    כתבו:
    def func():
        return string.isalpha()

בהצלחה!! 
-----------------------------------------------------------------------------------------


    תחילה הדפיסו את מסך הפתיחה (כאמור, מומלץ לאגד את ההדפסה שעיצבתם ביחידה הראשונה תחת פונקציה מסודרת):
        _    _
       | |  | |
       | |__| | __ _ _ __   __ _ _ __ ___   __ _ _ __
       |  __  |/ _' | '_ \ / _' | '_ ' _ \ / _' | '_ \
       | |  | | (_| | | | | (_| | | | | | | (_| | | | |
       |_|  |_|\__,_|_| |_|\__, |_| |_| |_|\__,_|_| |_|
                            __/ |
                           |___/
    6
    בקשו מהשחקן להזין (א) נתיב לקובץ מילים ו-(ב) מיקום (אינדקס) עבור מילה בקובץ. בהתאמה לקלט מהשחקן תיבחר המילה הסודית למשחק.
    הציגו לשחקן את המצב המתאים של האיש התלוי על פי מספר הניסיונות הכושלים שלו. בתחילת המשחק הציגו את מצב הפתיחה (המצב הראשון מבין שבעת המצבים, כלומר הקו האופקי של המתלה).
    מתחת לאיש התלוי, הציגו לשחקן את המילה הסודית במבנה של קווים תחתונים (עם רווחים).
    בקשו מהשחקן להכניס קלט של תו אחד בכל סיבוב.
    אם התו איננו תקין (שני תווים ומעלה ו/או אינו אות אנגלית, או ניחשו אותו בעבר), הדפיסו "X" למסך (כפי שעשיתם במשימה בסוף היחידה בנושא רשימות), הדפיסו את רשימת האותיות שכבר נוחשו בעבר (כמחרוזת באותיות קטנות, ממוינת מקטן לגדול ומופרדת בחצים) ובקשו מהשחקן להזין תו נוסף עד אשר התו שיוקלד יהיה תקין.
    לאחר כל ניחוש תקין, הציגו לשחקן את המילה הסודית במבנה של קווים תחתונים (גם אם ניחש חלקית או טרם הצליח לנחש כלל).
    במקרה של ניחוש כושל - הדפיסו לשחקן את הפלט :( ומתחתיו הדפיסו תמונה של האיש התלוי במצב "מתקדם" יותר.
    סיום המשחק:
        אם השחקן ניחש את המילה כולה כמו שצריך - הדפיסו למסך WIN.
        אם השחקן ניחש שבעה ניסיונות כושלים - הדפיסו למסך LOSE.

דוגמאות הפלט בהמשך יבהירו לכם כיצד צריכה התוכנית להתנהג.
------------------------------------------------------------------------------------
win!!!!!!!!!!!!!!!!
# Print the Welcome Screen

Enter file path: C:\files\words.txt
Enter index: 5

Let’s start!

    x-------x
_ _ _

Guess a letter: ^
X
Guess a letter: T
_ _ t
Guess a letter: b
:(
    x-------x
    |
    |
    |
    |
    |

_ _ t 
Guess a letter: c
c _ t 
Guess a letter: t
X
b -> c -> t
Guess a letter: p
:(

    x-------x
    |       |
    |       0
    |
    |
    |

c _ t
Guess a letter: a
c a t
WIN
------------------------------------------------------------------------------------
fail!!!!!!!!!!!!!!


# Print the Welcome Screen

Enter file path: C:\files\words.txt
Enter index: 5

Let’s start!

    x-------x
_ _ _

Guess a letter: ^
X
Guess a letter: T
_ _ t
Guess a letter: b
:(
    x-------x
    |
    |
    |
    |
    |

_ _ t
Guess a letter: c
c _ t 
Guess a letter: t
X
b -> c -> t
Guess a letter: p
:(

    x-------x
    |       |
    |       0
    |
    |
    |
 
c _ t
Guess a letter: s
:(

    x-------x
    |       |
    |       0
    |       |
    |
    |

c _ t
Guess a letter: &3
X
b -> c -> p -> s -> t
Guess a letter: M
:(

    x-------x
    |       |
    |       0
    |      /|\
    |
    |

c _ t
Guess a letter: o
:(

    x-------x
    |       |
    |       0
    |      /|\
    |      /
    |

c _ t
Guess a letter: f
:(
 
    x-------x
    |       |
    |       0
    |      /|\
    |      / \
    |

c _ t


-------------------------------------------------------------------------------------

בתוך שבועיים ממועד הגשת פרויקט מסכם זה, תקבלו עליו ציון ומשוב מלא מאנשי הצוות שלנו.
לאחר הבדיקה, ובמידה ועמדתם בכל דרישות הקורס, תוכלו להפיק לעצמכם תעודת סיום תחת הלשונית 'התקדמות'. 